Bagian II: Implementasi Laravel (60 Poin)
===================================================================================================
1.	fitur autentikasi menggunakan Laravel Breeze
•	Jika belum memiliki proyek Laravel, buat proyek baru dengan perintah berikut:
composer create-project laravel/laravel nama_proyek
•	Masuk ke direktori proyek: cd nama_proyek
•	Jalankan perintah berikut untuk menginstal Laravel Breeze:
composer require laravel/breeze –dev
•	Setelah itu, jalankan perintah untuk menginstal fitur autentikasi:
php artisan breeze:install
Kemudian pilih stack yang ingin digunakan, misalnya Blade (default) atau React/Vue jika menggunakan frontend modern.
•	Pastikan konfigurasi database sudah disesuaikan di .env lalu jalankan:
php artisan migrate
•	Jika menggunakan frontend seperti React/Vue, jalankan:
npm install && npm run dev
Namun, jika hanya menggunakan Blade (default), langkah ini bisa dilewati.
•	Jalankan perintah berikut untuk menjalankan aplikasi:
php artisan serve
Sekarang fitur login, registrasi, reset password, dan verifikasi email sudah tersedia di URL /login, /register, dll.
----------------------------------------------------------------------------------------------------------------

2.	Buat middleware di Larave
•	Jalankan perintah berikut untuk membuat Middleware
Php artisan make:middleware AdminMiddleware
•	Jakankan perintah berikutuntuk meng upgrade table user
php artisan make:migration AddRoleToUsersTable
•	Masukan code berikut ke database/migrations/file yang baru dibuat atau yang paling bawah
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->enum('role', ['user', 'admin'])->default('user')->after('email');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            //
        });
    }
};

•	Jalankan perintah berikut:
Php artisan migrate
•	Setelah itu jalankan perintah berikut:
	Php artisan tinker 
	use Illuminate\Support\Facades\Hash;
	use App\Models\User;
	$password = Hash::make(‘12345678’);
	User::create([“name” => “admin”, “email” => “admin@gmail.com”, “role” => “admin”, “password” => $password]);
•	contoh code di Models/User.php
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'role',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}

•	code di bagian AdminMiddleware:
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades\Auth; 

class AdminMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (Auth::check()) {
            if (Auth::user()->role === 'admin') {
                return $next($request); // Izinkan admin mengakses
            } else {
                return redirect('/user-dashboard'); // Redirect user biasa
            }
        }

        return redirect('/login'); // Jika tidak login, arahkan ke halaman login
    }
}

•	Tambahkan code berikut ke web.php

use App\Http\Middleware\AdminMiddleware;

// Middleware Authentication
Route::middleware('auth')->group(function () {
    // Dashboard hanya untuk Admin
    Route::get('/dashboard', function() {
        return view('dashboard');
    })->middleware(AdminMiddleware::class)->name('dashboard');

    // Dashboard khusus User Biasa
    Route::get('/user-dashboard', function() {
        return view('user-dashboard');
    })->name('user-dashboard');

    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});
-------------------------------------------------------------------------------------------------------

3.	Cara tambahkan logo sebagai watermark
•	Masuk ke folder resources/views/components/application-logo.blade.php kemudian ganti logo dengan milik anda, contoh:
<img src="logo.png" width="65px" />
-------------------------------------------------------------------------------------------------------

4.	Buat fitur tanda tangan digital menggunakan QR Code di Laravel.
•	jalankan command dari Simple QRcode seperti di bawah ini.
composer require simplesoftwareio/simple-qrcode
•	Buat file controller baru dengan command seperti di bawah ini.
php artisan make:controller DataController
•	Kemudian buat model sekaligus file migrate untuk membuat table penampung data yang akan di generate menjadi QRcode.
php artisan make:model Data -m
•	Buka file Data Migrate yang ada di folder database > migrations dan edit sehingga menjadi seperti di bawah ini.

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDataTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('data', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('url')->nullable();
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('data', function (Blueprint $table) {
            $table->dropColumn('url');
        });
        Schema::dropIfExists('data');
    }
}

•	jalankan command dibawah ini.
php artisan migrate
•	Buka file DataController kemudian edit code menjadi seperti di bawah ini.
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use App\Models\Data;

class DataController extends Controller
{
    public function index()
    {
        $data = Data::all(); // Ambil semua data dari database
        return view('formqrcode', compact('data'));
    }

    public function store(Request $request)
    {
        // Tambahkan validasi
        $request->validate([
            'name' => 'required|string|max:255',
            'url' => 'required|url', // Memastikan URL valid
        ]);

        // Jika validasi berhasil, lanjutkan untuk menyimpan data
        $data = new Data;
        $data->name = $request->name;
        $data->url = $request->url;
        $data->save();

        // Redirect kembali dengan pesan sukses
        return back()->with('success', 'Data berhasil disimpan!');
    }

    public function generate($id)
    {
        $data = Data::findOrFail($id);
        $qrcode = QrCode::size(400)->generate($data->url ?? "Nama: $data->name");
        return view('qrcode', compact('qrcode'));
    }

    public function destroy(Request $request, $id)
    {
        $data = Data::find($id);

        if (!$data) {
            return response()->json(['success' => false, 'message' => 'Data tidak ditemukan.'], 404);
        }

        $data->delete();

        return response()->json(['success' => true, 'message' => 'Data berhasil dihapus.']);
    }
}

•	Buka file web.php yang ada di folder routes, kemudian tambahkan code ini
use App\Http\Controllers\DataController;

// Route untuk menampilkan halaman form QR Code dengan data dari database
Route::get('/formqrcode', [DataController::class, 'index'])->name('formqrcode');

// Route untuk DataController
Route::controller(DataController::class)->group(function () {
    Route::post('/data', [DataController::class, 'store'])->name('store');
    Route::get('/qrcode/{id}', [DataController::class, 'generate'])->name('generate'); // Generate QR Code
    Route::match(['delete'], '/data/{id}', [DataController::class, 'destroy'])->name('destroy');
});

•	Tambahkan file baru di folder views dengan nama formqrcode.blade.php. kemudian tamabhkan code berikut:

<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>Generator</title>
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Styles -->
    <style>
        /* Import Google Font */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        /* Background & body */
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            margin: 0;
            width: 100%;
            height: 100vh;
            font-family: 'Poppins', sans-serif;
        }

        /* Container utama dengan efek glassmorphism */
        .container {
            width: 50rem;
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: fadeIn 1s ease-in-out;
        }

        /* Animasi Fade In */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Form styling */
        form {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            padding-bottom: 10px;
        }

        .form-group input {
            width: 90%;
            padding: 12px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.15);
            color: white;
            outline: none;
            transition: 0.3s;
        }

        /* Efek saat input diisi */
        .form-group input:focus {
            border-color: #00eaff;
            box-shadow: 0 0 10px #00eaff;
        }

        /* Placeholder */
        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        /* Tombol dengan efek neon */
        button {
            background: linear-gradient(45deg, #00eaff, #00ff6a);
            color: black;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: 0.3s;
            font-weight: bold;
            box-shadow: 0 0 10px #00eaff;
        }

        /* Hover button */
        button:hover {
            background: linear-gradient(45deg, #00ff6a, #00eaff);
            transform: scale(1.05);
            box-shadow: 0 0 15px #00ff6a;
        }

        /* Table styling */
        table {
            width: 90%;
            border-collapse: collapse;
            margin-top: 20px;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 8px;
            overflow: hidden;
        }

        /* Header & data */
        th,
        td {
            padding: 12px;
            text-align: center;
            color: white;
        }

        /* Header table */
        th {
            background: linear-gradient(45deg, #00eaff, #00ff6a);
            color: black;
        }

        /* Link dalam table */
        td a {
            text-decoration: none;
            color: black;
            background: linear-gradient(45deg, #00eaff, #00ff6a);
            padding: 6px 12px;
            border-radius: 8px;
            transition: 0.3s;
            font-weight: bold;
        }

        /* Hover efek link */
        td a:hover {
            background: linear-gradient(45deg, #00ff6a, #00eaff);
            box-shadow: 0 0 10px #00ff6a;
            transform: scale(1.05);
        }

        /* Judul */
        h2 {
            color: white;
            text-align: center;
            font-size: 24px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
        }

        /* Responsif untuk layar kecil */
        @media (max-width: 600px) {
            .container {
                width: 90%;
            }

            form {
                flex-direction: column;
            }

            .form-group input {
                width: 100%;
            }
        }

        /* Tombol hapus */
        .delete-btn {
            background: linear-gradient(45deg, #ff4d4d, #ff0000);
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: 0.3s;
            font-weight: bold;
            box-shadow: 0 0 10px #ff4d4d;
        }

        /* Hover efek tombol hapus */
        .delete-btn:hover {
            background: linear-gradient(45deg, #ff0000, #ff4d4d);
            box-shadow: 0 0 15px #ff0000;
            transform: scale(1.1);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row mt-5">
            <h2>Form QR Code</h2>
            <form class="form-inline" action="{{ route('store') }}" method="POST">
                @csrf
                <div class="form-group mb-2">
                    <input type="text" class="form-control" name="name" placeholder="Masukkan Nama" required>
                </div>
                <div class="form-group mb-2">
                    <input type="text" name="url" placeholder="Masukan Link (optional)" required>
                </div>
                <button type="submit" class="btn btn-primary ml-1 mb-2">Create</button>
            </form>
            <h2>List QR Code</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Nama</th>
                        <th scope="col">Link</th>
                        <th scope="col">QR code</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($data as $item)
                        {{-- Ubah variabel agar tidak ditimpa --}}
                        <tr>
                            <td>{{ $item->name }}</td>
                            <td>{{ $item->url }}</td>
                            <td>
                                <a href="{{ route('generate', $item->id) }}" class="btn btn-primary">Generate</a>
                                <p></p>
                                <form action="{{ route('destroy', $item->id) }}" method="POST" class="delete-form">
                                    @csrf
                                    @method('DELETE')
                                    <button type="submit" class="delete-btn">Delete</button>
                                </form>                                                              
                            </td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</body>

<script>
    document.querySelectorAll('.delete-form').forEach(form => {
        form.addEventListener('submit', function(event) {
            event.preventDefault(); // Mencegah reload halaman

            if (confirm('Apakah Anda yakin ingin menghapus data ini?')) {
                fetch(this.action, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        this.closest('tr').remove(); // Hapus baris tabel tanpa reload
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        });
    });
</script>

</html>

•	Buat file view baru di dalam folder views dengan nama qrcode.blade.php untuk menampilkan QR code nantinya. Kemudian tambahkan code di bawah ini ke file view baru tersebut.

<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Qr Code</title>
        <!-- Fonts -->
        <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
        <!-- Styles -->
        <style>
 /* Import Google Font */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

/* Background & body */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
    margin: 0;
    width: 100%;
    height: 100vh;
    font-family: 'Poppins', sans-serif;
}

/* Container utama dengan efek glassmorphism */
.container {
    display: flex;
    flex-direction: column; /* Tata secara vertikal */
    justify-content: center;
    align-items: center;
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border-radius: 15px;
    padding: 25px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: fadeIn 1s ease-in-out;
}

/* Animasi Fade In */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Center QR Code */
.row {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
}

/* Form styling */
form {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding-bottom: 10px;
}

.form-group input {
    width: 100%;
    padding: 12px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    font-size: 16px;
    background: rgba(255, 255, 255, 0.15);
    color: white;
    outline: none;
    transition: 0.3s;
}

/* Efek saat input diisi */
.form-group input:focus {
    border-color: #00eaff;
    box-shadow: 0 0 10px #00eaff;
}

/* Placeholder */
.form-group input::placeholder {
    color: rgba(255, 255, 255, 0.6);
}

/* Table styling */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 8px;
    overflow: hidden;
}

/* Header & data */
th, td {
    padding: 12px;
    text-align: center;
    color: white;
}

/* Header table */
th {
    background: linear-gradient(45deg, #00eaff, #00ff6a);
    color: black;
}

/* Judul */
h2 {
    color: white;
    text-align: center;
    font-size: 24px;
    text-transform: uppercase;
    letter-spacing: 1.5px;
}

/* Responsif untuk layar kecil */
@media (max-width: 600px) {
    .container {
        width: 90%;
    }

    form {
        flex-direction: column;
    }

    .form-group input {
        width: 100%;
    }
}

        </style>
    </head>
    <body>
        <div class="container">
            <h2>Scan QR Code Here</h2>
            <div class="row mt-5">
              {!! $qrcode !!}
            </div>
        </div>
    </body>
</html>
--------------------------------------------------------------------------------------------------------------

5.	Captcha pada form login/registrasi Laravel
•	Jalankan perintah ini di terminal:
	composer require mews/captcha
	php artisan vendor:publish --provider="Mews\Captcha\CaptchaServiceProvider"
•	tambahkan code ini di resources/views/auth/login.blade.php

<!-- Captcha -->
        <div class="mt-4">
            <x-input-label for="captcha" :value="__('Captcha')" />
            <input id="captcha" type="text" name="captcha" required class="block mt-1 w-full">
            <img src="{{ captcha_src() }}" alt="Captcha Image"
                onclick="this.src='{{ url('captcha/default') }}?'+Math.random()'" style="cursor: pointer;"
                class="mt-2">
            <x-input-error :messages="$errors->get('captcha')" class="mt-2" />
        </div>

•	jalankan perintah berikut:
php artisan make:request LoginRequest

•	tambahkan code ini di app\Http\Requests\LoginRequest.php
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
            'captcha' => ['required', 'captcha'], // Pastikan validasi captcha ada di sini
        ];
    }

    public function messages(): array
    {
        return [
            'captcha.required' => 'Captcha wajib diisi.',
            'captcha.captcha' => 'Captcha tidak valid.',
        ];
    }

    public function authenticate(): void
    {
        // Validasi captcha
        $this->validate([
            'captcha' => ['required', 'captcha'],
        ]);

        // Proses autentikasi
        if (!Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            throw ValidationException::withMessages([
                'email' => __('auth.failed'),
            ]);
        }
    }
    
}

•	edit code di app/Http/Controllers/Auth/AuthenticatedSessionController.php

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $credentials = $request->only('email', 'password');
        
        // Validasi manual untuk captcha jika diperlukan
        $validator = Validator::make($request->all(), [
            'captcha' => 'required|captcha',
        ]);

        if ($validator->fails()) {
            return back()->withErrors(['captcha' => 'Captcha tidak valid.'])->withInput();
        }

        if (!Auth::attempt($credentials)) {
            return back()->withErrors(['email' => 'Email atau password salah.'])->withInput();
        }
        
        $request->session()->regenerate();

        return redirect()->intended(route('dashboard'));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }
}

•	jalankan perintah berikut
php artisan make:middleware CaptchaMiddleware
•	tambahkan code ini ke app\Http\Middleware\CaptchaMiddleware.php

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class CaptchaMiddleware
{
    public function handle(Request $request, Closure $next)
    {
        // Pastikan request memiliki field captcha sebelum validasi
        if (!$request->has('captcha')) {
            return redirect()->back()->withErrors(['captcha' => 'Captcha wajib diisi.'])->withInput();
        }

        $validator = Validator::make($request->all(), [
            'captcha' => 'required|captcha',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors(['captcha' => 'Captcha tidak valid.'])->withInput();
        }

        return $next($request);
    }
}


•	tambahkan code ini ke web.php:
use App\Http\Controllers\Auth\AuthenticatedSessionController;

// Route untuk captcha
Route::post('/login', [AuthenticatedSessionController::class, 'store']);

•	Anda juga bisa mengatur atau mengkonfigurasi captcha sesuai keinginan anda di folder config/captcha.php. contohnya:

return [
    'disable' => env('CAPTCHA_DISABLE', false),
    'characters' => ['2', '3', '4', '6', '7', '8', '9','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'M', 'N', 'P', 'Q', 'R', 'T', 'U', 'X', 'Y', 'Z'],
    'default' => [
        'length' => 6,
        'width' => 120,
        'height' => 36,
        'quality' => 90,
        'math' => false,
        'expire' => 60,
        'encrypt' => false,
    ],

SEMOGA BERMANFAAT




